/**
 * DEVELOPMENT WEBPACK CONFIGURATION
 */

const path = require('path');
const webpack = require('webpack');
const HtmlWebpackPlugin = require('html-webpack-plugin');
const DashboardPlugin = require('webpack-dashboard/plugin');
const config = require('../config');

// PostCSS plugins
const cssnext = require('postcss-cssnext');
const postcssReporter = require('postcss-reporter');

const BundleAnalyzerPlugin = require('webpack-bundle-analyzer')
  .BundleAnalyzerPlugin;

module.exports = require('./webpack.base.babel')({
  basename: config.dev.basename,
  // Add hot reloading in development
  entry: [
    'eventsource-polyfill', // Necessary for hot reloading with IE
    'webpack-hot-middleware/client',
    path.join(process.cwd(), 'app/main.jsx'), // Start with js/main.jsx
  ],

  // Don't use hashes in dev mode for better performance
  output: {
    filename: '[name].js',
    chunkFilename: '[name].chunk.js',
    publicPath: config.dev.server + config.dev.publicPath,
  },

  // Add development plugins
  plugins: [
    new webpack.HotModuleReplacementPlugin(), // Tell webpack we want hot reloading

    new webpack.NoEmitOnErrorsPlugin(),

    new HtmlWebpackPlugin({
      inject: true, // Inject all files that are generated by webpack, e.g. bundle.js
      template: 'app/index.ejs',
    }),

    new DashboardPlugin(),

    new webpack.LoaderOptionsPlugin({
      options: {
        context: __dirname,
        publicPath: config.dev.server + config.dev.publicPath,
      },
    }),

    ...(process.env.ANALYSE
      ? [
          new BundleAnalyzerPlugin({
            // Port that will be used in `server` mode to start HTTP server.
            analyzerPort: 8000,
          }),
        ]
      : []),
  ],

  // Load the CSS in a style tag in development
  cssLoaders: [
    'style-loader',
    {
      loader: 'css-loader',
      options: {
        modules: true,
        importLoaders: 1,
        localIdentName: '[local]__[path][name]__[hash:base64:5]',
        sourceMap: true,
      },
    },
    {
      loader: 'postcss-loader',
      options: {
        plugins: () => [
          cssnext(),
          postcssReporter({
            // Posts messages from plugins to the terminal
            clearMessages: true,
          }),
        ],
        sourceMap: true,
      },
    },
  ],

  externalCssLoaders: ['style-loader', 'css-loader'],

  sassLoaders: [
    'style-loader',
    {
      loader: 'css-loader',
      options: {
        localIdentName: '[local]__[path][name]__[hash:base64:5]',
        modules: true,
        importLoaders: 2,
        sourceMap: true,
      },
    },
    {
      loader: 'postcss-loader',
      options: {
        plugins: () => [
          cssnext(),
          postcssReporter({
            // Posts messages from plugins to the terminal
            clearMessages: true,
          }),
        ],
        sourceMap: true,
      },
    },
    {
      loader: 'sass-loader',
      options: {
        sourceMap: true,
      },
    },
  ],

  // Tell babel that we want to hot-reload
  babelQuery: {
    presets: ['react-hmre'],
    plugins: ['syntax-dynamic-import'],
  },

  // Emit a source map for easier debugging
  devtool: 'cheap-module-eval-source-map',
});
